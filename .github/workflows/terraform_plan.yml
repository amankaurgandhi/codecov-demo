name: "Terraform Plan"

env:

  TF_LOG_PATH: ./terraform.log
  TF_LOG: INFO #TRACE, DEBUG, INFO, WARN or ERROR

permissions:
  id-token: write
  contents: write    # This is required for actions/checkout
  pull-requests: write

on:
  [push, pull_request]

jobs:
  terraform-plan:
    name: "Terraform Plan"
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./terraform
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          ref: ${{ github.head_ref }}

      - name: Configure AWS Credentials for reading state
        uses: aws-actions/configure-aws-credentials@v1
        with:
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/Admin
          role-session-name: ${{ github.actor }}_${{ github.job }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.1.8


      - name: Check if Terraform backend exists
        id: check_backend
        uses: andstor/file-existence-action@v1
        with:
          files: "backend.tf"

      - name: Generate Terraform backend
        if: steps.check_backend.outputs.files_exists == 'false'
        id: backend
        run: |
          cat > backend.tf << EOF
          provider "aws" {
            region = "${{ secrets.AWS_REGION }}"

            ignore_tags {
              key_prefixes = ["AutoTag_"]
            }
          }

          terraform {
            backend "s3" {
              encrypt        = "true"
              bucket         = "${{ secrets.AWS_ACCOUNT_ID }}-tf-remote-state"
              dynamodb_table = "tf-state-lock"
              key            = "${{ github.repositoryUrl }}"
              region         = "${{ secrets.AWS_REGION }}"
              profile        = "${{ secrets.AWS_ACCOUNT_ID }}"
            }
          }
          EOF
          ls

      - name: Commit Backend.tf
        if: steps.check_backend.outputs.files_exists == 'false'
        uses: stefanzweifel/git-auto-commit-action@v4
        with:
          commit_message: "Add terraform backend"
          file_pattern: '*backend.tf'

      - name: Terraform Format
        id: fmt
        run: terraform fmt -check
        continue-on-error: true

      - name: Terraform Init
        id: init
        run: terraform init

      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color

      - name: Terraform Plan
        id: plan
        run: terraform plan -no-color -input=false -out=terraform.tfplan
        continue-on-error: true

      - name: Reformat Plan
        if: steps.plan.outcome == 'success'
        run: terraform show -no-color terraform.tfplan | sed -E 's/^([[:space:]]+)([-+])/\2\1/g' > plan.txt
        #echo '${{ steps.plan.outputs.stdout || steps.plan.outputs.stderr }}' \
        #| sed -E 's/^([[:space:]]+)([-+])/\2\1/g' > plan.txt

      # GitHUB PR has 65k character limit: https://github.com/robburger/terraform-pr-commenter/issues/6
      #    echo "$PLAN" >> $GITHUB_ENV
      - name: Put Plan in Env Var
        if: steps.plan.outcome == 'success'
        run: |
          PLAN=$(cat plan.txt)
          echo "PLAN<<EOF" >> $GITHUB_ENV
          echo "${PLAN:0:65536}" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV
      - name: Invoke foobarFunction Lambda
        uses: gagoar/invoke-aws-lambda@v3.3.1
        with:
          #AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          #AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          FunctionName: foobarFunction
          Payload: '{ "myParameter": false }'
      - uses: actions/github-script@v6
        # env:
        #   ORIG_PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
            #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`

            <details><summary>Show Plan</summary>

            \`\`\`\n
            ${process.env.PLAN}
            \`\`\`

            </details>

            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })

      - name: Post Plan Sucess to GitHub PR
        if: steps.plan.outcome == 'success'
        uses: mshick/add-pr-comment@v1
        with:
          allow-repeats: true
          repo-token: ${{ secrets.GITHUB_TOKEN }}
          repo-token-user-login: 'github-actions[bot]'
          message: |
            ***Terraform Plan Diff***
            ```diff
            ${{ env.PLAN }}
            ```

      - name: Post Plan Failure to GitHub PR
        if: steps.plan.outcome == 'failure'
        uses: mshick/add-pr-comment@v1
        with:
          repo-token: ${{ secrets.GITHUB_TOKEN }}
          repo-token-user-login: 'github-actions[bot]'
          message: |
            ## üî¥ Terraform Plan Creation Failed

            ```
            ${{ steps.plan.outputs.stderr }}
            ```

      # - name: Notify Mirosoft Teams On Success
      #   if: steps.plan.outcome == 'success'
      #   uses: jdcargile/ms-teams-notification@v1.3
      #   with:
      #     github-token: ${{ github.token }} # this will use the runner's token.
      #     ms-teams-webhook-uri: ${{ secrets.TEAMS_WEBHOOK }}
      #     notification-summary: Terraform Plan Successfully Created
      #     notification-color: 34eb5c #Green
      #     #timezone: America/Denver

      # - name: Notify Mirosoft Teams On Failure
      #   if: steps.plan.outcome == 'failure'
      #   uses: jdcargile/ms-teams-notification@v1.3
      #   with:
      #     github-token: ${{ github.token }} # this will use the runner's token.
      #     ms-teams-webhook-uri: ${{ secrets.TEAMS_WEBHOOK }}
      #     notification-summary: Terraform Plan Creation Failed
      #     notification-color: eb4034 #Red
      #     #timezone: America/Denver

      # - name: Tar Files
      #   run: tar -cvf plan_artifacts.tar .
      #   # Using tar to overcome GitHub artifacts loosing permissions, which Terraform does not like
      #   # Reference: https://github.com/actions/upload-artifact/issues/38

      # - name: Save Plan Artifacts
      #   if: steps.plan.outcome == 'success'
      #   uses: actions/upload-artifact@v3
      #   with:
      #     name: plan
      #     path: plan_artifacts.tar

      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1